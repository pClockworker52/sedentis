name: Test Bot

on:
  workflow_dispatch:

# Add concurrency group to prevent parallel runs
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

# Daily job to run the simple forecast bot
jobs:
  daily_build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      # Modify main.py to output detailed logs to console
      - name: Configure logging to console
        run: |
          # Append this code to the main.py file to ensure logs go to console
          cat >> logging_config.py << 'EOF'
          import logging

          # Configure root logger to output to console
          def setup_logging():
              root_logger = logging.getLogger()
              root_logger.setLevel(logging.INFO)
              
              # Create console handler with formatting
              console_handler = logging.StreamHandler()
              console_handler.setLevel(logging.INFO)
              formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
              console_handler.setFormatter(formatter)
              
              # Add console handler to root logger
              root_logger.addHandler(console_handler)
              
              # Set specific loggers to DEBUG
              logging.getLogger('forecasting_tools').setLevel(logging.DEBUG)
              logging.getLogger('__main__').setLevel(logging.DEBUG)
              
              # Suppress verbose loggers
              logging.getLogger('httpx').setLevel(logging.WARNING)
              
              return root_logger
          EOF
          
          # Create a simple script to display debug info
          cat > debug_output.py << 'EOF'
          import os
          import sys
          import logging
          from logging_config import setup_logging

          logger = setup_logging()

          def print_debug_info():
              logger.info("=== DEBUG INFO ===")
              logger.info(f"Python version: {sys.version}")
              logger.info(f"Working directory: {os.getcwd()}")
              logger.info(f"Directory contents: {os.listdir('.')}")
              logger.info("=== ENV VARS ===")
              # Print environment variables (excluding secrets)
              for key, value in os.environ.items():
                  if not any(secret in key.lower() for secret in ['token', 'key', 'secret', 'password']):
                      logger.info(f"{key}: {value}")
                  else:
                      logger.info(f"{key}: [REDACTED]")
              logger.info("=== END DEBUG INFO ===")

          if __name__ == "__main__":
              print_debug_info()
          EOF

      # First print debug info
      - name: Print debug info
        run: |
          poetry run python debug_output.py
        env:
          METACULUS_TOKEN: ${{ secrets.METACULUS_TOKEN }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

      # Run with extensive logging to console
      - name: Run bot with console logging
        run: |
          # Modify your main.py to include the new logging config
          echo "import logging_config" | cat - main.py > temp_main.py && mv temp_main.py main.py
          # Insert the logging setup right after imports
          sed -i '/^import/a logging_config.setup_logging()' main.py
          # Run with full console output
          poetry run python main.py --mode test_questions
        env:
          METACULUS_TOKEN: ${{ secrets.METACULUS_TOKEN }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
